name: CI Tests

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master", "develop" ]
  workflow_dispatch: {}

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gnupg

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=imapbackup --cov-report=xml --cov-report=term-missing -m "unit"

      - name: Run integration tests
        run: |
          pytest tests/ -v --cov=imapbackup --cov-append --cov-report=xml --cov-report=term-missing -m "integration"

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run flake8
        run: |
          flake8 imapbackup.py --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 imapbackup.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run pylint
        continue-on-error: true
        run: |
          pylint imapbackup.py --exit-zero --max-line-length=127

  test-summary:
    name: Test Summary
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" == "failure" ] || [ "${{ needs.lint.result }}" == "failure" ]; then
            echo "Tests or linting failed"
            exit 1
          fi
          echo "All tests passed!"
